input {
        file {
                path => ["/var/log/f5ddos.log"]
                sincedb_path => "/var/log/logstash/sincedb"
                start_position => "end"
                tags => ["f5ddos"]
 	}
       file {
                path => ["/var/log/f5ddos_stats.log"]
                sincedb_path => "/var/log/logstash/sincedb"
                start_position => "end"
                tags => ["f5ddos_stats"]
 }
}

filter {
   if "f5ddos_stats" in [tags] {
        grok {
            match => {"message" =>  ["%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:eventSourceIP}%{SPACE}%{GREEDYDATA:xdata}"] }
        }
	mutate { gsub => [ "xdata",":","," ] }
        csv {
                source => "xdata"
                separator => ","
                columns => [
 			"user_process",
			"context_name",
			"vector_name",
			"profile_name",
			"protocol_type",
			"attack_type",
			"status",
			"attack_detected",
			"ba_detected",
			"bd_detected",
			"agg_detected",
			"attack_count",
			"stats_1h_samples",
			"stats",
			"stats_rate",
			"stats_1m",
			"stats_1h",
			"drops",
			"drops_rate",
			"drops_1m",
			"drops_1h",
			"dropped_bytes",
			"dropped_bytes_rate",
			"hw_offload",
			"int_drops",
			"int_drops_rate",
			"int_drops_1m",
			"int_drops_1h",
			"int_dropped_bytes",
			"int_dropped_bytes_rate",
			"ba_stats",
			"ba_stats_rate",
			"ba_drops",
			"ba_drops_rate",
			"ba_drops_1m",
			"ba_drops_1h",
			"bd_stats",
			"bd_stats_rate",
			"bd_drops",
			"bd_drops_rate",
			"bd_drops_1m",
			"bd_drops_1h",
			"wl_count",
			"detection",
			"mitigation_low",
			"mitigation_high",
			"mitigation_curr",
			"bdos_mitigation_config",
			"detection_ba",
			"mitigation_ba_low",
			"mitigation_ba_high",
			"mitigation_ba",
			"detection_bd",
			"mitigation_bd_low",
			"mitigation_bd_high",
			"mitigation_bd",
			"creation_attack_id",
			"most_recent_attack_id",
			"most_recent_applied_time",
			"most_recent_agg_attack_id",
			"most_recent_agg_applied_time",
			"most_recent_ba_attack_id",
			"most_recent_ba_applied_time",
			"most_recent_bd_attack_id",
			"most_recent_bd_applied_time",
			"bypass_count",
			"signature_accuracy"
		]
        }
	mutate { add_field => {"tmm" => "4"}}


	
	ruby { code => 'event.set("total_drop_rate", event.get("drops_rate").to_i + event.get("int_drops_rate").to_i)' }
	ruby { code => 'event.set("total_dropped_bytes_rate", event.get("dropped_bytes_rate").to_i + event.get("int_dropped_bytes_rate").to_i)' }
	ruby { code => 'event.set("detection_all_tmm", event.get("detection").to_i * event.get("tmm").to_i)' }
	ruby { code => '
			sum = event.get("mitigation_low").to_i + event.get("mitigation_high").to_i
			avg = sum.to_i / 2
			event.set("mitigation_curr_all_tmm", avg.to_i * event.get("tmm").to_i)
		' }
        ruby { code => '
                        sum = event.get("mitigation_ba_low").to_i + event.get("mitigation_ba_high").to_i
                        avg = sum.to_i / 2
                        event.set("mitigation_ba_all_tmm", avg.to_i * event.get("tmm").to_i)
                ' }
        ruby { code => '
                        sum = event.get("mitigation_bd_low").to_i + event.get("mitigation_bd_high").to_i
                        avg = sum.to_i / 2
                        event.set("mitigation_bd_all_tmm", avg.to_i * event.get("tmm").to_i)
                ' }
    	if "dos-common" in [vector_name] { mutate { gsub => ["vector_name","/Common/dos-common/",""] } }

     }

    if "f5ddos" in [tags] {
        grok {
            match => {"message" =>  ["%{SYSLOGTIMESTAMP:syslog_timestamp}%{SPACE}%{SYSLOGHOST:eventSourceIP}%{SPACE}%{GREEDYDATA:xdata}"] }
        }
            mutate { gsub => [ "xdata","\"\"","NA;" ] }
        mutate { gsub => [ "xdata","\"\,",";" ] } 
        mutate { gsub => [ "xdata","[\",]","" ] }
        csv {
                source => "xdata"
                separator => ";"        
                columns => [
                    "attackstarttime",
                    "bigiphostip",
                    "bigiphostname",
                    "virtualserver",
                    "sourceAddress",
                    "destinationAddress",
                    "sourcePort",
                    "destinationPort",
                    "routedomain",
                    "vlan",
                    "attackvector",
                    "attackid",
                    "attackevent",
                    "action",
                    "pkctspersecond",
                    "droppedpackets",
                    "duration",
                    "thresholdvalue",
                    "trigger",
                    "field1",
                    "field2",
                    "field3",
                    "field4",
                    "field5",
                    "field6",
                    "field7",
                    "field8",
                    "field9",
                    "field10",
                    "field11",
                    "field12",
                    "field13",
                    "field14"
                ]
        }
        if "Attack" in [pkctspersecond] {
            mutate {
            rename => ["destinationAddress", "recordtype" ]
            rename => ["sourcePort", "dnsquery" ]
            rename => ["routedomain", "destinationAddress" ]
            rename => ["vlan", "sourcePort" ]
            rename => ["sourceAddress", "vlan" ]
            rename => ["destinationPort", "sourceAddress" ]
            rename => ["attackvector", "destinationPort" ]
            rename => ["attackid", "routedomain" ]
            rename => ["attackevent", "attackvector" ]
            rename => ["action", "attackid" ]
            rename => ["pkctspersecond", "attackevent" ]
            rename => ["droppedpackets", "action" ]
            rename => ["duration", "pkctspersecond" ]
            rename => ["thresholdvalue", "droppedpackets" ]
            rename => ["trigger", "duration" ]
            }
        }
        if "BDOS" in [sourceAddress] {
            mutate {
                rename => ["attackvector", "bdosrule" ]
                rename => ["virtualserver", "attackvector" ]
                rename => ["bigiphostname", "virtualserver" ]
                rename => ["attackstarttime", "bigiphostname"]
                rename => ["sourceAddress", "action" ]
                rename => ["destinationAddress", "attackdetectionEPS" ]
                rename => ["sourcePort", "attackmitigationEPS" ]
                rename => ["destinationPort", "state" ]
                rename => ["vlan", "field6" ]
                rename => ["attackid", "trigger" ]
                split => { "bdosrule" => "\s" }
        }
        }
        if "Flow" in [sourceAddress] {
            mutate {
                rename => ["attackstartime", "bigiphostip" ]
                rename => ["bigiphostname", "context" ]
                rename => ["attackstarttime", "bigiphostname"]
                rename => ["sourceAddress", "trigger" ]
                rename => ["destinationAddress", "flowscount" ]
        }
        }
      
        
        if "Allow" in [action] and "F5" not in [sourceAddress] {
            mutate { add_field => {"TargetedIP" => "%{destinationAddress}"}}
            mutate { add_field => {"SuspiciousIP" => "%{sourceAddress}"}}
	    mutate { add_field => {"SuspiciousPackets" => "%{pkctspersecond}"}}
	        mutate { add_field => {"context" => "%{virtualserver}" } }
	    if "Device" not in [virtualserver] {
	        mutate { update => {"context" => "Virtual Server" } } 
    	    }
	    }
        if "Drop" in [action] and "F5" not in [sourceAddress] {
            mutate { add_field => {"AttackedIP" => "%{destinationAddress}"}}
            mutate { add_field => {"AttackerIP" => "%{sourceAddress}"}}
 	        mutate { add_field => {"context" => "%{virtualserver}" } }
            if "Device" not in [virtualserver] {
            mutate { update => {"context" => "Virtual Server" } }
  	        }
        }
        if "Per-SrcIP" in [trigger] {
            if "Allow" in [action] {
                mutate { add_field => {"BadActorIP" => "%{sourceAddress}"}}
            }
            if "Drop" in [action] {
                mutate { add_field => {"BadActorIP" => "%{sourceAddress}"}}
            }   
        }

        if "F5" in [sourceAddress] {
            
            mutate {
            add_tag => [ "ipilogmessage" ]
	        rename => ["virtualserver", "f5module" ]            
            rename => ["sourceAddress", "ipivendor" ]            
            rename => ["destinationAddress", "tmosversion" ]
            rename => ["sourcePort", "context" ]
            rename => ["destinationPort", "virtualserver" ]
            rename => ["action", "srcFQDN" ]
            rename => ["pkctspersecond", "srcGEOL" ]
            rename => ["droppedpackets", "dstFQDN" ]
            rename => ["duration", "dstGEOL" ]
            rename => ["attackvector", "destinationAddress" ]
            rename => ["routedomain", "ipipolicy" ]
            rename => ["vlan", "sourceAddress" ]
            rename => ["thresholdvalue", "vlan" ]
            rename => ["attackid", "sourcePort" ]
            rename => ["attackevent", "destinationPort" ]
            rename => ["trigger", "protocol" ]
            rename => ["field1", "routedomain" ]
            rename => ["field2", "category" ]
            rename => ["field3", "action" ]
            rename => ["field4", "categoryclass" ]
            rename => ["field5", "IPIdroppedpckts" ]
	        rename => ["field6", "IPIallowpckts" ]
	        rename => ["field7", "attackvector" ]
            rename => ["field14", "duration" ]
            }
        }
	
        if "ipilogmessage" in [tags] {
            if "attacked_ips" not in [category] {
                mutate { add_field => {"BadActorIP" => "%{sourceAddress}"}}  
            }
            if "attacked_ips" in [category] {
                mutate { add_field => {"IPIAttacked" => "%{destinationAddress}"}}
            }
            if "Accept" in [action] {
                mutate { 
                    update => {"IPIallowpckts" =>"1024" }
                    update => {"IPIdroppedpckts" => "0" }
                    add_field => {"pkctspersecond" => "1024" }
                    add_field => {"droppedpackets" => "0" }
	            add_field => {"SuspiciousIP" => "%{sourceAddress}"}
		    add_field => {"TargetedIP" => "%{destinationAddress}"}
		    update => {"attackvector" => "IPI : %{category}" }
                }
            }            
            if "Drop" in [action] {
                mutate { 
                    update => {"attackvector" => "IPI : %{category}"}
                    update => {"IPIallowpckts" =>"0" }
                    update => {"IPIdroppedpckts" => "1024" }
                    add_field => {"pkctspersecond" => "1024" }
		    add_field => {"droppedpackets" => "1024" }
       		    add_field => {"AttackedIP" => "%{destinationAddress}"}
       		    add_field => {"AttackerIP" => "%{sourceAddress}"}
                }
            }        
        }
        if "Cryptographic" in [sourceAddress] {
            mutate {
                rename => ["sourceAddress","action"]
                rename => ["bigiphostname","scope"]
                rename => ["bigiphostip","bigiphostname"]
                rename => ["attackstarttime","bigiphostip"]
                rename => ["routedomain","syncookieRejects"]
                rename => ["destinationAddress","routedomain"]
                rename => ["sourcePort","syncookieGenerated"]
                rename => ["destinationPort","syncookieAccepts"]
            }    
        }
        if  "Virtual Server" in [bigiphostname] {
	    mutate {
            rename => ["sourceAddress", "thresholdvalue" ]
	    rename => ["attackstarttime", "bigiphostip" ]
	    rename => ["destinationAddress", "trigger" ]

            }
        }
        if  "Device" in [bigiphostname] {
	    mutate {
            rename => ["sourceAddress", "thresholdvalue" ]
            rename => ["sourcePort", "attackstarttime" ]
	    rename => ["destinationAddress", "trigger" ]
            }
        }
        if "Cryptographic" in [sourceAddress] {
            mutate {
                rename => ["sourceAddress","action"]
                rename => ["bigiphostname","scope"]
                rename => ["bigiphostip","bigiphostname"]
                rename => ["attackstarttime","bigiphostip"]
                rename => ["routedomain","syncookieRejects"]
                rename => ["destinationAddress","routedomain"]
                rename => ["sourcePort","syncookieGenerated"]
                rename => ["destinationPort","syncookieAccepts"]
            }    

        }

        if [virtualserver]=~/^[1-9]/ and "unknown" in [sourcePort] {
           
	    mutate {
            rename => ["sourceAddress", "category" ]
            rename => ["virtualserver", "sourceAddress" ]
            rename => ["destinationAddress", "routedomain" ]
            rename => ["sourcePort", "srcFQDN" ]
            rename =>  ["destinationPort", "srcGEOL" ]
            rename => ["routedomain", "action" ]
            }
        }
        if "Auto" in [destinationAddress] {
            mutate {
            rename => ["sourceAddress", "attackvector1" ]
            rename => ["destinationAddress", "trigger" ]
            rename => ["sourcePort", "attackdetectionEPS" ]
            rename =>  ["destinationPort", "attackmitigationEPS" ]
            }
     	 }
        if "Auto" in [sourcePort] {                                                                                                                             
            mutate {                                                                                                                                                    
            rename => ["sourceAddress", "recordtype" ]
	    rename => ["destinationAddress", "attackvector1" ]
            rename => ["sourcePort", "trigger" ]
            rename => ["destinationPort", "attackdetectionEPS" ]                                                                                                             
            rename =>  ["routedomain", "attackmitigationEPS" ]
            }                                                                                                                                                           
         }
    
    date {
        match => [ "attackstarttime", "MMM dd yyyy HH:mm:ss" ]
        target => attackstarttime
        }
       
        if [sourceAddress] and [sourceAddress] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {

        geoip {              
	     
             source => "sourceAddress"
             
               }
        }
    if [sourceAddress] == "NA" { mutate { update => { "sourceAddress" =>"0.0.0.0" } } }
    if [destinationAddress] == "NA" { mutate { update => { "destinationAddress" =>"0.0.0.0" } } } 
    if [AttackerIP] == "NA" { mutate { update => { "AttackerIP" =>"0.0.0.0" } } }
    if [AttackedIP] == "NA" { mutate { update => { "AttackedIP" =>"0.0.0.0" } } } 
    if [pkctspersecond] == "NA" {  mutate { update => { "pkctspersecond" =>"0" } } }
    if [droppedpackets] == "NA" { mutate { update => {"droppedpackets" =>"0" } } }
    if "dos-common" in [attackvector] { mutate { gsub => ["attackvector","/Common/dos-common/",""] } }
    if "BDOS Signature-Based" in [trigger] {mutate { add_field => {"state" => "RE-USED" }}}
}
}     

output {
	if "f5ddos" in [tags] {
        elasticsearch {
            index => "f5-ddos-%{+YYYY.MM.dd}"
            hosts => ["localhost:9200"]
        }
	}
        if "f5ddos_stats" in [tags] {
        elasticsearch {
            index => "f5-stats-ddos-y-%{+YYYY.MM.dd}"
            hosts => ["localhost:9200"]
        }
        }
}
